//
// Created by guoshichao on 19-3-7.
//
#include <stdio.h>
#include <cstring>

int calulateSum(unsigned char *buffer, int *length) {
    unsigned char sum = 0;
    for (int i = 0; i < *length; i++) {
        sum += buffer[i];
    }
    memcpy(buffer, &sum, sizeof(unsigned char));
    printf("sum %02x\n", sum);
    *length += sizeof(unsigned char);
    return *length;
}

int main(int argc, char **argv) {

    int result = 0x14 + 0x93 + 0x00 + 0x00 + 0x65 + 0x92
                 + 0x60 + 0x02 + 0x00
                 + 0x39 + 0x01 + 0x01
                 + 0x15 + 0x01 + 0x01
                 + 0x45 + 0x00 + 0x01
                 + 0x01;

    unsigned char result2 = 0x00 + 0x00 + 0x64 + 0x30;

    unsigned char content[] = {0x14, 0x93, 0x00, 0x00, 0x64, 0x30};
    printf("the result are %04x\n", result);
    printf("the result2 are %02x\n", result2);
    int len = sizeof(content) / sizeof(unsigned char);
    calulateSum(content, &len);
    // printf("%d \n", len);

    unsigned char recoveryDmsParamsBuf[] =
            {0x7e, // 标识符
             0x3c, // 校验码
             0x14, 0x93, // 厂商编号
             0x00, 0x00, // 厂商编号
             0x65, // 外设编号: dms
             0x30, // 功能码
                    // 数据内容 (empty)
             0x7e, // 标识符
             0x10,
            };

    int arrLen = sizeof(recoveryDmsParamsBuf) / sizeof(unsigned char);
    printf("the array length are %d\n", arrLen);


    unsigned char result3 = 0x00 + 0x00 + 0x65 + 0x34;
    printf("result 3 are %02x\n", result3);

    unsigned int result4 =
            0x00 + 0x00 + 0x64 + 0x35 +
            0x68 + // 0 报警使能速度阈值
            0x03 + // 1 报警提示音量
            0x01 + // 2 报警提示音量
            0x00 + // 3 主动定时拍照时间间隔WORD
            0x90 +
            0x01 + // 5 主动定距拍照距离间隔WORD
            0x00 +
            0x03 + // 7 单次主动拍照张数
            0x02 + // 8 单次主动拍照时间间隔
            0x01 + // 9 拍照分辨率
            0x01 + // 10 视频录制分辨率
            0x00 + // 11 预留字段
            0x00 + 0x00 + 0x00 + 0x00 +
            0x00 + 0x00 + 0x00 + 0x00 +
            0x14 + // 20 障碍物报警距离阈值
            0x37 + // 21 障碍物报警前后视频录制时间
            0x03 + // 22 障碍物报警拍照张数
            0x02 + // 23 障碍物报警拍照间隔
            0x38 + // 24 频繁变道报警判断时间段
            0x05 + // 25 频繁变道报警判断次数
            0x38 + // 26 频繁变道报警前后视频录制时间
            0x02 + // 27 频繁变道报警拍照张数
            0x01 + // 28 频繁变道报警拍照间隔
            0x50 + // 29 车道偏离报警前后视频录制时间
            0x03 + // 30 车道偏离报警拍照张数
            0x02 + // 31 车道偏离报警拍照间隔
            0x10 + // 32 前向碰撞报警时间阈值
            0x05 + // 33 前向碰撞报警前后视频录制时间
            0x03 + // 34 前向碰撞报警拍照张数
            0x02 + // 35 前向碰撞报警拍照间隔
            0x30 + // 36 行人碰撞报警时间阈值
            0x05 + // 37 行人碰撞报警前后视频录制时间
            0x03 + // 38 行人碰撞报警拍照张数
            0x02 + // 39 车距监控报警距离阈值
            0x30 + // 40 车距监控报警距离阈值
            0x05 + // 41 车距过近报警前后视频录制时间
            0x03 + // 42 车距过近报警拍照张数
            0x02 + // 43 车距过近报警拍照间隔
            0x03 + // 44 道路标识识别拍照张数
            0x02 + // 45 道路标识识别拍照间隔
            0x00 + // 46 保留字段
            0x00 +
            0x00 +
            0x00;

    printf("result4 are %04x\n", result4);

    unsigned int result5 =
            0x00 + 0x00 + 0x65 + 0x35 +
            0x30 + // 0 报警使能速度阈值
            0x06 + // 1 报警提示音量
            0x01 + // 2 主动拍照策略
            0x20 + // 3 主动定时拍照时间间隔
            0x00 + //
            0x24 + // 5 主动定距拍照距离间隔
            0x00 + //
            0x03 + // 7 每次主动拍照张数
            0x02 + // 8 每次主动拍照时间间隔
            0x01 + // 9 拍照分辨率
            0x01 + // 10 视频录制分辨率
            0x01 + // 21 吸烟报警判断时间间隔
            0x20 +
            0x01 + // 23 接打电话报警判断时间间隔
            0x08 +
            0x05 + // 25 疲劳驾驶报警前后视频录制时间
            0x03 + // 26 疲劳驾驶报警拍照张数
            0x02 + // 27 疲劳驾驶报警拍照间隔时间
            0x00 + // 28 预留
            0x05 + // 29 打电话报警前后视频录制时间
            0x03 + // 30 接打电话报警拍驾驶员面部特征照片张数
            0x02 + // 31 接打电话报警拍驾驶员面部特征照片间隔时间
            0x05 + // 32 抽烟报警前后视频录制时间
            0x03 + // 33 抽烟报警拍驾驶员完整面部特征照片张数
            0x02 + // 34 抽烟报警拍驾驶员完整面部特征照片间隔时间
            0x05 + // 35 报警前后视频录制时间
            0x03 + // 36 分神驾驶报警拍照张数
            0x02 + // 37 分神驾驶报警拍照间隔时间
            0x05 + // 38 驾驶异常视频录制时间
            0x03 + // 39 驾驶异常抓拍照片张数
            0x02; // 40 驾驶异常拍照间隔

    printf("result5 are %04x\n", result5);

    unsigned result6 =
            0x00 + 0x00 +
            0x64 +
            0x31 +
            0x30 +
            0x00 +
            0x00 + 0x00 + 0x00 + 0x00 +
            0x00 + 0x00 +
            0x00 + 0x00 +
            0x01 + 0xc4 + 0x1b + 0x9c +
            0x06 + 0x59 + 0xf8 + 0x32 +
            0x19 + 0x08 + 0x29 + 0x14 + 0x38 + 0x54 +
            0x00 + 0x61;
    printf("result6 %02x\n", result6);


    unsigned result7 =
            0x00 + 0x03 +
            0x00 + 0x00 +
            0x65 +
            0xa1;
    printf("result7 %02x\n", result7);

    unsigned char issueFacialInfo[] = {
            0x00, 0x00, // 厂商编号
            0x65, // 外设编号: dms
            0x88, // 功能码
            // 数据内容
            0x80, //子功能码
            0x00, //设置类型
            0x02, //人脸库列表数量
            0x19, //人脸ID长度
            0x6b, 0x79, 0x2d, 0x36, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x39, 0x2d, 0x31, 0x35, 0x36, 0x37, 0x33, 0x34, 0x32, 0x34, 0x31, 0x30, 0x39, 0x32, 0x31, //人脸ID
            0x0b, //从业资格证长度
            0x6b, 0x79, 0x2d, 0x36, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x39,  //从业资格证
            0x01, // 人脸图片协议地址00 ftp, 01 http
            0xdd, // 人脸图片协议地址长度
            0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x69, 0x6d, 0x67, 0x73, 0x61, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6d, 0x67, 0x3f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x26, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x3d, 0x38, 0x30, 0x26, 0x73, 0x69, 0x7a, 0x65, 0x3d, 0x62, 0x39, 0x39, 0x39, 0x39, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x30, 0x26, 0x73, 0x65, 0x63, 0x3d, 0x31, 0x35, 0x36, 0x39, 0x32, 0x33, 0x34, 0x36, 0x39, 0x38, 0x37, 0x31, 0x37, 0x26, 0x64, 0x69, 0x3d, 0x32, 0x32, 0x32, 0x31, 0x62, 0x62, 0x62, 0x32, 0x31, 0x62, 0x39, 0x36, 0x65, 0x31, 0x61, 0x63, 0x31, 0x66, 0x31, 0x37, 0x63, 0x37, 0x65, 0x65, 0x30, 0x31, 0x30, 0x66, 0x32, 0x38, 0x38, 0x37, 0x26, 0x69, 0x6d, 0x67, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x30, 0x26, 0x73, 0x72, 0x63, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x62, 0x2d, 0x73, 0x73, 0x6c, 0x2e, 0x64, 0x75, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6d, 0x25, 0x32, 0x46, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x25, 0x32, 0x46, 0x69, 0x74, 0x65, 0x6d, 0x25, 0x32, 0x46, 0x32, 0x30, 0x31, 0x35, 0x31, 0x30, 0x25, 0x32, 0x46, 0x30, 0x31, 0x25, 0x32, 0x46, 0x32, 0x30, 0x31, 0x35, 0x31, 0x30, 0x30, 0x31, 0x32, 0x33, 0x32, 0x34, 0x35, 0x37, 0x5f, 0x6d, 0x46, 0x51, 0x50, 0x56, 0x2e, 0x6a, 0x70, 0x65, 0x67, // 人脸图片协议地址
            0x01, // 图片来源
            0x19, // 人脸ID长度
            0x6b, 0x79, 0x2d, 0x36, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x39, 0x2d, 0x31, 0x35, 0x36, 0x37, 0x33, 0x34, 0x33, 0x34, 0x31, 0x30, 0x39, 0x32, 0x31, // 人脸ID
            0x0b, // 从业资格证长度
            0x6b, 0x79, 0x2d, 0x36, 0x31, 0x34, 0x2d, 0x32, 0x30, 0x31, 0x38, // 从业资格证
            0x01, //人脸图片协议地址00 ftp, 01 http
            0xc0, // 人脸图片协议地址长度
            0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x69, 0x6d, 0x67, 0x73, 0x61, 0x2e, 0x62, 0x61, 0x69, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x6d, 0x67, 0x3f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x26, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x3d, 0x38, 0x30, 0x26, 0x73, 0x69, 0x7a, 0x65, 0x3d, 0x62, 0x39, 0x39, 0x39, 0x39, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x30, 0x26, 0x73, 0x65, 0x63, 0x3d, 0x31, 0x35, 0x36, 0x39, 0x32, 0x33, 0x34, 0x36, 0x39, 0x38, 0x37, 0x31, 0x35, 0x26, 0x64, 0x69, 0x3d, 0x66, 0x64, 0x36, 0x63, 0x66, 0x39, 0x62, 0x64, 0x63, 0x66, 0x63, 0x35, 0x30, 0x35, 0x34, 0x65, 0x30, 0x66, 0x63, 0x36, 0x33, 0x64, 0x62, 0x32, 0x33, 0x30, 0x34, 0x34, 0x62, 0x31, 0x39, 0x64, 0x26, 0x69, 0x6d, 0x67, 0x74, 0x79, 0x70, 0x65, 0x3d, 0x30, 0x26, 0x73, 0x72, 0x63, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x25, 0x33, 0x41, 0x25, 0x32, 0x46, 0x25, 0x32, 0x46, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x63, 0x64, 0x6e, 0x2e, 0x73, 0x6f, 0x68, 0x75, 0x2e, 0x63, 0x6f, 0x6d, 0x25, 0x32, 0x46, 0x32, 0x30, 0x31, 0x33, 0x31, 0x32, 0x30, 0x37, 0x25, 0x32, 0x46, 0x49, 0x6d, 0x67, 0x33, 0x39, 0x31, 0x34, 0x32, 0x32, 0x32, 0x31, 0x34, 0x2e, 0x6a, 0x70, 0x67, // 人脸图片协议地址
            0x01, //图片来源
    };
    int infoLen = sizeof(issueFacialInfo);
    printf("info len = %d\n", infoLen);
    unsigned char result8 = 0;
    for (int i = 0; i < infoLen; ++i) {
        result8 += issueFacialInfo[i];
    }

    printf("result8 %02x\n", result8);

    unsigned char inquireFacialInfo[] = {
            0x00, 0x00, // 厂商编号
            0x65, // 外设编号: dms
            0x88, // 功能码
            // 数据内容
            0x83, //子功能码
    };

    int iinfoLen = sizeof(inquireFacialInfo);
    printf("info len = %d\n", iinfoLen);
    unsigned char result9 = 0;
    for (int i = 0; i < iinfoLen; ++i) {
        result9 += inquireFacialInfo[i];
    }

    printf("result9 %02x\n", result9);

    int arr[] = {50, 51, 41, 51, 49, 52, 42, 54, 51, 52, 48, 51, 49};
    int sum = 0;
    for (int i = 0; i < (sizeof(arr) / sizeof(int)); ++i) {
        sum += arr[i];
    }
    int average = sum / (sizeof(arr) / sizeof(int));
    printf("%d\n", average);
}
